#+title Rob Streeting's Everything Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+PROPERTY: header-args:lua :tangle ~/.hammerspoon/init.lua

* Emacs

** Lexical bindings

#+begin_src emacs-lisp
;; -- lexical-binding: t; --
#+end_src

** Global Constants

*** Configuration file location

#+begin_src emacs-lisp

  (defvar rsws/config-file-location
    "~/.emacs.d/emacs.org"
    "The location of this configuration file in the filesystem.")

  (defvar rsws/init-file-location
    "~/.emacs.d/init.el"
    "The location of the init.el file for auto-evaluation")

#+end_src

*** Fonts

#+begin_src emacs-lisp

  (defvar rsws/fixed-font "Iosevka Rostre"
    "Default fixed-width font to use globally")

  (defvar rsws/variable-font "Iosevka Aile Rostre"
    "Default variable-width font to use globally")

  (defvar rsws/heading-font "Iosevka Etoile"
    "Variable-width font to use for headings in documents.")

  (defvar rsws/present-font "Iosevka Etoile"
    "Variable-width font to use for presenting globally")

  (defvar rsws/fixed-font-size 16
    "Default fixed-width font size to use globally")

  (defvar rsws/variable-font-size 16
    "Default variable-width font size to use globally")

#+end_src

#+RESULTS:
: rsws/variable-font-size

**** Iosevka                                                        :prereq:

Install iosevka and iosevka aile from [[https://github.com/be5invis/Iosevka][github]].

** MacOS

Set up the Mac keyboard keys to the different types of modifier keys

*** Super Key

Assign s key to Option

#+begin_src emacs-lisp

  (setq mac-option-key-is-meta nil)
  (setq mac-option-modifier 'super)

#+end_src

*** Meta Key

Assign M key to Cmd

#+begin_src emacs-lisp

  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)

#+end_src

** Package Management

*** Package repositories

Tell Emacs about the package repositories online that we want to download packages from.

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)
  (package-refresh-contents)

#+end_src

*** Use-package

Make package installation easier with the use-package package manager tool.

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; Always ensure all packages are installed by default.
  (setq use-package-always-ensure 't)

#+end_src

*** Support for packages on version control

Use [[https://tony-zorman.com/posts/package-vc-install.html][this package-vc-install wrapper]] to simplify loading packages from git repos.

#+begin_src emacs-lisp

  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)

#+end_src

** Aesthetics

*** Theme

Install doom emacs colour theme and visual improvements.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-outrun-electric t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "gruvbox")
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

Install modus themes

#+begin_src emacs-lisp

  (use-package modus-themes)

#+end_src

*** Transparency

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))

  (add-to-list 'default-frame-alist '(alpha . (90 90)))

#+end_src

*** Remove title bar

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist '(undecorated-round . t))

#+end_src

*** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
                      :font rsws/fixed-font
                      :height (* rsws/fixed-font-size 10))

  (set-face-attribute 'fixed-pitch nil
                      :font rsws/fixed-font
                      :height (* rsws/fixed-font-size 10))

  (set-face-attribute 'variable-pitch nil
                      :font rsws/variable-font
                      :height (* rsws/variable-font-size 10))

#+end_src

*** Remove default UI

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

*** Line numbers

Put line numbers on by default for all buffers...

#+begin_src emacs-lisp

  (global-display-line-numbers-mode 0)

#+end_src

...except for org and shell buffers.

#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

#+end_src

*** Column numbers

#+begin_src emacs-lisp

  (setq column-number-mode t)

#+end_src

*** Indentation guides

Use highlight-indentation package and activate for programming buffers

#+begin_src emacs-lisp

    (use-package highlight-indentation
      :hook (python-mode . highlight-indentation-mode))

#+end_src

*** Colour-matched parentheses

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Icons

Install icons for use in various UI elements.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

**** Make sure to install the fonts the first time using M-x all-the-icons-install-fonts :prereq:

*** Mode line

Install moodline

#+begin_src emacs-lisp

  (use-package mood-line
    :config (mood-line-mode))

#+end_src

** Modal editing

*** God mode

God mode prevents the need for using control keys for non-insert operations.

#+begin_src emacs-lisp

  (use-package god-mode
    :bind
    ("<escape>" . god-mode-all)
    (:map god-local-mode-map
          ("." . repeat)))

#+end_src

*** Repeat mode

Not really modal editing, but you can kind of replicate a modal editing experience.

#+begin_src emacs-lisp

  (use-package repeaters
    :vc (:fetcher github :repo mmarshall540/repeaters)
    :config
     (repeaters-define-maps
      '(("rsws/window-mgmt"
         split-window-right "C-x 3" "r"
         split-window-below "C-x 2" "l"
         window-swap-states "w" :exitonly)))
    (repeat-mode)
    :custom
    (repeat-exit-key "<space>")
    (repeat-exit-timeout 30))

#+end_src

** Completions

*** Key binding completions 

Install which-key, which tells you what key combinations can come next in a chord.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

*** Code completions

Install company mode for nice code completions.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :config
    ;; Make sure that space and enter behave as usual
    (defun rsws/company-abort-and-insert-space ()
      (interactive)
      (progn (company-abort) (insert " ")))
    (defun rsws/company-abort-and-insert-nl ()
      (interactive)
      (progn (company-abort) (electric-newline-and-maybe-indent)))
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection)
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ;; Cancel company completion and add the newline
          ("<return>". rsws/company-abort-and-insert-nl)
          ;; Cancel company completion and add the space
          ("<space>". rsws/company-abort-and-insert-space))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-idle-delay 0.0) ;; how long to wait until popup
    (company-minimum-prefix-length 1))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Search

Install vertico for nice list-based search completions

#+begin_src emacs-lisp

  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src

Savehist package ordered entries in completions by most recently used

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+end_src

Marginalia provides extra information about completions

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

Orderless provides searching on completions that doesn't require search terms to be in order

#+begin_src emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

Consult provides a bunch of search functionality, a bit like Counsel for Ivy

#+begin_src emacs-lisp

  (use-package consult
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer)
           ("C-c g" . consult-ripgrep)
           ("C-c o" . consult-outline)))

#+end_src

*** Snippets

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    (yas-global-mode 1))
  
  (use-package yasnippet-snippets
    :after yasnippet)

#+end_src

** Static Code Analysis

*** Syntax validation

Install flycheck.

#+begin_src emacs-lisp

  (use-package flycheck
    :config
    ;; Switch off underlines
    (set-face-attribute 'flycheck-warning nil :underline nil))

#+end_src

*** Code parsing

Turn on tree sitter.

#+begin_src emacs-lisp

  (global-tree-sitter-mode)

#+end_src

Install language grammars.

#+begin_src emacs-lisp

  (setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (c "https://github.com/tree-sitter/tree-sitter-c")
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  ;; Uncomment to install all of the grammars
  ;; (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

#+end_src

Hack to map old language major modes to new tree sitter modes.

#+begin_src emacs-lisp

  (setq major-mode-remap-alist
   '((yaml-mode . yaml-ts-mode)
     (bash-mode . bash-ts-mode)
     (js2-mode . js-ts-mode)
     (typescript-mode . typescript-ts-mode)
     (json-mode . json-ts-mode)
     (css-mode . css-ts-mode)
     (python-mode . python-ts-mode)))
  
#+end_src

*** Languages

**** LSP Mode

Install lsp-mode for interacting with language servers for different programming languages

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c q")
    :config
    (lsp-enable-which-key-integration t)
    ;; enable automatically for certain languages
    ;; (add-hook 'python-mode-hook #'lsp)
    :custom
    (lsp-headerline-breadcrumb-enable-diagnostics nil))

#+end_src

LSP UI adds some extra IDE-type UI elements

#+begin_src emacs-lisp

  ;; (use-package lsp-ui
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom)
  ;;   (lsp-ui-doc-show-with-cursor t)
  ;;   (lsp-ui-peek-always-show t))

#+end_src

LSP treemacs adds outlines and file explorers for current buffer

#+begin_src emacs-lisp

  ;; (use-package lsp-treemacs
  ;;   :after lsp)

#+end_src

LSP ivy adds project-wide symbol search

#+begin_src emacs-lisp

  ;;  (use-package lsp-ivy)

#+end_src

**** Eglot

Eglot is a built-in alternative to LSP mode that is more minimal.

#+begin_src emacs-lisp

  (use-package eglot
    :config
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'go-ts-mode-hook 'eglot-ensure)
    (add-hook 'eglot-mode-hook
              (lambda ()
                (add-hook 'after-save-hook 'eglot-format)))
    :custom
    (eglot-ignored-server-capabilities '())
    :bind
    (:map eglot-mode-map
          ("C-c l f" . eglot-format-buffer)
          ("C-c l e" . flymake-show-project-diagnostics)
          ("C-c l n" . flymake-goto-next-error)
          ("C-c l p" . flymake-goto-prev-error)
          ("C-c l a" . eglot-code-actions)
          ("C-c l r" . eglot-rename)
          ("C-c l d" . xref-find-definitions)
          ("C-c l x" . xref-find-references)
          ("C-c l m" . compile)))

#+end_src

**** Python

Use =pylsp= LSP server for IDE features for python.

***** pylsp                                                         :prereq:

Requires installation of [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][pylsp]]

#+begin_src shell

  pip install 'python-lsp-server[all]'
  pip install pylsp-black

#+end_src

***** jupyter

Support for jupyter notebooks

#+begin_src emacs-lisp

  (use-package code-cells
    :bind (:map code-cells-mode-map
                ("C-c C-c" . 'code-cells-eval)
                ("M-p" . 'code-cells-move-cell-up)
                ("M-n" . 'code-cells-move-cell-down)))

#+end_src

**** Rust

Function to allow cargo run to be run with command line arguments

#+begin_src emacs-lisp

  (defun rustic-cargo-run-with-args ()
    "Run 'cargo run' with arguments"
    (interactive)
    (rustic-cargo-run t))

#+end_src

Function to allow running cargo run without prompt

#+begin_src emacs-lisp

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

#+end_src

Install rustic

#+begin_src emacs-lisp

  (use-package rustic
    :bind (:map rustic-mode-map
              ("C-c C-c C-t" . rustic-cargo-run-with-args)
              ("C-c C-c C-r" . rustic-cargo-run))
    :config
    ;; uncomment for less flashiness
    (setq rustic-lsp-client 'eglot)
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-eldoc-enable-hover nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    ;; (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  ;; (setq lsp-rust-analyzer-server-display-inlay-hints t)

#+end_src

**** Lua

#+begin_src emacs-lisp

  (use-package lua-mode
    :custom
    (lua-indent-level 4))

#+end_src

** Debugging

*** dap mode

Workaround for mac issue.
#+begin_src emacs-lisp

  (add-to-list 'image-types 'svg)

#+end_src


#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))

  (use-package dap-mode
    :config
    (dap-ui-mode)
    (dap-ui-controls-mode 1)

    (require 'dap-lldb)
    (require 'dap-gdb-lldb)
    ;; installs .extension/vscode
    (dap-gdb-lldb-setup)
    (dap-register-debug-template
     "Rust::LLDB Run Configuration"
     (list :type "lldb"
           :request "launch"
           :name "LLDB::Run"
           :gdbpath "rust-lldb"
           :target nil
           :cwd nil)))

#+end_src

** Terminals and Shells

*** eshell

Emacs shell for running command line operations.
- Advantages: integrated with emacs, so benefits from emacs functionality and can run elisp
  - elisp also works in aliases, see custom eshell commands section below
  - supports tramp, so you can run eshell on remote (setup pending)
  - can pipe results of command into a buffer with:

#+begin_src shell

  echo "Hello!" > #<test-buffer>

#+end_src

- Disadvantages: Because it's not a full terminal emulator, there's some things it doesn't do as well. We can use term-mode or vterm for those.
  - virtualenv
  - ${} instead of $()
  - Programs that read input might not behave
  - Piping less functional
  - Slow

Installation:

#+begin_src emacs-lisp

  (defun rsws/configure-eshell ()
    ;; Save command history
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    ;; Set variables
    (setq eshell-history-size 10000 ;; keep 10k commands in history
          eshell-buffer-maximum-lines 10000 ;; keep 10k lines in buffer
          eshell-hist-ignoredups t ;; remove duplicate commands from history
          eshell-scroll-to-bottom-on-input t))
  
  (use-package eshell
    :hook (eshell-first-time-mode . rsws/configure-eshell)
    :init
    (require 'esh-mode)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-distory-buffer-when-process-dies t)
      ;; Run some commands in term-mode
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    :bind
    ((:map eshell-mode-map
           (("C-r" . 'consult-history)
            ("C-p" . 'eshell-previous-matching-input-from-input)
            ("C-n" . 'eshell-next-matching-input-from-input)
            ("M-p" . 'previous-line)
            ("M-n" . 'next-line))))
    )

#+end_src

**** eshell-vterm                                                   :prereq:

Requires git cloning the source code.

#+begin_src shell

  git clone https://github.com/iostapyshyn/eshell-vterm.git ~/.emacs.d/site-lisp/eshell-vterm

#+end_src

Use vterm for running visual commands in eshell instead of term-mode, as it's faster and more feature-rich.

#+begin_src emacs-lisp

  (use-package eshell-vterm
    :load-path "site-lisp/eshell-vterm"
    :demand t
    :after eshell
    :config
    (eshell-vterm-mode))

#+end_src

**** Custom eshell commands

Set the =v= command to run any command in vterm from eshell

#+begin_src emacs-lisp

  (defalias 'eshell/v 'eshell-exec-visual)

#+end_src

Set the =ee= command to open a file in an emacs buffer

#+begin_src emacs-lisp

  (defalias 'eshell/ee 'find-file-other-window)

#+end_src

Set the =clock= command to toggle timer

#+begin_src emacs-lisp

  (define-minor-mode rsws/eshell-timer-mode "Toggle timer info in eshell")

  (defalias 'eshell/clock 'rsws/eshell-timer-mode)

#+end_src

**** Prompt customisation

#+begin_src emacs-lisp

  (setq eshell-prompt-function
        (lambda ()
          (setq eshell-prompt-regexp "└─\> [λ|#] ")
          (concat
           (make-string (window-width) 9472)
           (propertize "\n┌─[" 'face 'font-lock-regexp-face)
           (propertize (format-time-string "%H:%M:%S" (current-time)))
           (propertize "]──[" 'face 'font-lock-regexp-face)
           (propertize (concat (eshell/pwd)))
           (propertize "]\n" 'face 'font-lock-regexp-face)
           (propertize "└─>" 'face 'font-lock-regexp-face)
           (propertize (if (= (user-uid) 0) " # " " λ "))
           )))

#+end_src

Time every command that is run in the shell ([[https://emacs.stackexchange.com/a/42606][stack overflow]])

#+begin_src emacs-lisp

  (defface rsws/eshell-current-command-time-track-face
    '((((class color) (background light)) :foreground "dark blue")
      (((class color) (background  dark)) :foreground "green2"))
    "Face for the time tracker"
    :group 'eshell-faces)

  (defvar-local eshell-current-command-start-time nil)

  (defun eshell-current-command-start ()
    (setq eshell-current-command-start-time (current-time)))

  (defun eshell-current-command-stop ()
    (when eshell-current-command-start-time
      (eshell-interactive-print
       (propertize
        (format "\n--> time taken: %.0fs\n"
                (float-time
                 (time-subtract (current-time)
                                eshell-current-command-start-time)))
        'face 'rsws/eshell-current-command-time-track-face))
      (setq eshell-current-command-start-time nil)))

  (defun eshell-current-command-time-track ()
    (add-hook 'eshell-pre-command-hook #'eshell-current-command-start nil t)
    (add-hook 'eshell-post-command-hook #'eshell-current-command-stop nil t))

  (add-hook 'eshell-mode-hook #'eshell-current-command-time-track)

#+end_src

*** vterm

vterm is a full terminal emulator, so may provide better support for stuff that assumes it's running in a terminal (e.g. htop).

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000))

#+end_src

Add multi-vterm to be able to run multiple vterm buffers at once.

#+begin_src emacs-lisp

  (use-package multi-vterm)

#+end_src

**** vterm dependencies                                             :prereq:

- vterm uses some native dependencies that'll have to be installed before it works. The details are listed on the [[https://github.com/akermu/emacs-libvterm/#requirements][github page.]]

  #+begin_src shell

    # MacOS
    brew install cmake libtool libvterm

  #+end_src
 
** File System Navigation

*** Dired

In listing switches, =-a= shows dotfiles and =-B= hides files ending in =~=. They correspond with what dired passes to =ls= on the command line.

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    (:map dired-mode-map
          ;; b goes up to parent dir
          ("b" . 'dired-single-up-directory)
          ;; N creates new file
          ("N" . 'find-file))
    :config
    (require 'dired-x)
    :custom
    ;; Use gls for driving dired
    ((insert-directory-program "gls")
     (dired-use-ls-dired t)
     ;; Put all the directories at the top, hide backup files
     (dired-listing-switches "-aghoB --group-directories-first")
     (delete-by-moving-to-trash t)))

#+end_src

Single dired buffer

#+begin_src emacs-lisp

  (use-package dired-single)

  (defun my-dired-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
     loaded."
    ;; <add other stuff here>
    (define-key dired-mode-map [remap dired-find-file]
                'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
                'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
                'dired-single-up-directory))

  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (my-dired-init)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'my-dired-init))

#+end_src

File icons

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    :custom ((all-the-icons-dired-monochrome nil)))

#+end_src

Support hiding dotfiles

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :bind (:map dired-mode-map ("H" . 'dired-hide-dotfiles-mode)))

#+end_src

**** coreutils                                                      :prereq:

Coreutils must be installed on MacOS with homebrew before =gls= can be used by dired.

#+begin_src shell

  brew install coreutils

#+end_src

** Org Mode

*** Basic configuration

Define a function that will be run every time org-mode is initiated, that does some custom setup.

#+begin_src emacs-lisp

  (defun rsws/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

Add markdown export:

#+begin_src emacs-lisp

  (require 'ox-md nil t)

#+end_src

*** Installation

Install the org package and configure.

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . rsws/org-mode-setup)

    :config
    ;; Set default verb key prefix (for sending http requests from org)
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
    ;; Open agenda from anywhere
    (define-key global-map "\C-ca" 'org-agenda)
    ;; Install org habits
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)

    :custom
    (org-agenda-files '("~/notes/journal"))
    ;; Prettier org mode bits
    (org-ellipsis " ⮠")
    (org-cycle-separator-lines -1)
    (org-habit-graph-column 60)
    ;; Save timestamp when marking as DONE
    (org-log-done 'time)
    ;; Put logbook in the org drawer section
    (org-log-into-drawer t)
    ;; Define workflow of tasks
    (org-todo-keywords
     '((sequence "TODO(t)" "DOING(n!)" "WAIT(w@/!)" "|" "DONE(d!)" "DELEGATED(x@)" "POSTPONED(p)" "CANCELLED(c@)")))
    ;; Allow 4 levels of priority
    (org-priority-highest ?A)
    (org-priority-lowest ?E)
    (org-refile-targets '((org-agenda-files :maxlevel . 2)))
    ;; Open org agenda in the same window
    (org-agenda-window-setup 'current-window)
    ;; Settings for clocktable in agenda
    (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :fileskip0 t :filetitle t))
    ;; Hide markup
    (org-hide-emphasis-markers t)
    ;; Scale images
    (org-image-actual-width nil))

#+end_src

*** Tags

Available tags for use when tagging todos. These are used for specific agenda views.

#+begin_src emacs-lisp

  (setq org-tag-alist '(
                        ("untagged" . ?u)
                        ("techdebt" . ?d)
                        ("sprint" . ?s)
                        ("collab" . ?c)
                        ("emacs" . ?e)
                        ("admin" . ?a)
                        ("extracurricular" . ?x)
                        ("learning" . ?l)
                        ("adhoc" . ?h)
                        ("chore" . ?o)
                        ("reminder" . ?r)
                        ("alert" . ?z)))

#+end_src

*** Processing inbox

Modified from =jethro/org-agenda-process-inbox-item=
Link: [[https://github.com/jethrokuan/.emacs.d/blob/master/init.el][.emacs.d/init.el at master · jethrokuan/.emacs.d · GitHub]]

#+begin_src emacs-lisp

  (defun rsws/org-agenda-process-inbox-item ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer
     (org-agenda-set-tags)
     (org-agenda-priority)
     (org-agenda-set-effort)
     (org-agenda-refile nil nil t)))

#+end_src

*** Custom agenda

#+begin_src emacs-lisp

  (setq org-agenda-custom-commands '())
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-include-diary t)
  (setq org-agenda-mouse-1-follows-link t)
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "#00ffff" :weight bold))
          ("WAIT" . (:foreground "#888888" :weight bold))
          ("DOING" . "#E35DBF")
          ("CANCELLED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("DELEGATED" . "pink")
          ("POSTPONED" . "#008080")))

#+end_src

**** Work Dashboard

Dashboard for day-to-day work.

#+begin_src emacs-lisp

  ;; (add-to-list 'org-agenda-custom-commands
  ;;              '("d" "Dashboard"
  ;;                ((agenda "" (
  ;;                             (org-agenda-files '("~/notes" "~/notes/knowledge" "~/notes/knowledge/journal"))
  ;;                             (org-deadline-warning-days 14)
  ;;                             (org-agenda-span 'day)
  ;;                             (org-agenda-start-with-log-mode '(state clock))
  ;;                             (org-agenda-sorting-strategy '(priority-down))
  ;;                             (org-agenda-prefix-format "%-12s %-6e")))
  ;;                 (tags-todo "reminder"
  ;;                            ((org-agenda-overriding-header "Reminders")
  ;;                             (org-agenda-prefix-format "%-12s %-6e %-50c")))
  ;;                 (tags-todo "untagged"
  ;;                            ((org-agenda-files '("~/notes/knowledge/inbox.org"))
  ;;                             (org-agenda-overriding-header "Inbox")
  ;;                             (org-agenda-prefix-format "%-12s %-6e %-50c")))
  ;;                 (tags-todo "alert"
  ;;                            ((org-agenda-files '("~/notes/knowledge/alerts.org"))
  ;;                             (org-agenda-overriding-header "Alerts")
  ;;                             (org-agenda-prefix-format "%-12s %-6e %-50c")))
  ;;                 (tags-todo "sprint|admin|adhoc|collab|alert"
  ;;                            ((org-agenda-overriding-header "Todo")
  ;;                             (org-agenda-sorting-strategy '(priority-down effort-up))
  ;;                             (org-agenda-prefix-format "%-12s %-6e %-50c")))
  ;;                 (tags-todo "emacs"
  ;;                            ((org-agenda-overriding-header "Emacs Config")
  ;;                             (org-agenda-sorting-strategy '(priority-down effort-up))
  ;;                             (org-agenda-prefix-format "%-12s %-6e %-50c"))))))

#+end_src

**** Journal Dashboard

A lighter dashboard based on the org-journal files only.

#+begin_src emacs-lisp

  (add-to-list 'org-agenda-custom-commands
               '("j" "Journal-Based Dashboard"
                 ((agenda "" (
                              (org-deadline-warning-days 14)
                              (org-agenda-span 'day)
                              (org-agenda-start-with-log-mode '(state clock))
                              (org-agenda-sorting-strategy '(priority-down))
                              (org-agenda-prefix-format "%-12s %-6e")))
                  (todo "TODO|DOING|WAIT"
                             (
                              (org-agenda-overriding-header "Inbox")
                              (org-agenda-files (org-journal--list-files))
                              (org-agenda-prefix-format "%-12s %-6e")))
                  (tags-todo "sprint|admin|adhoc|collab|alert"
                             (
                              (org-agenda-overriding-header "TODO")
                              (org-agenda-files (rsws/org-roam-list-notes-by-tag "project"))
                              (org-agenda-sorting-strategy '(priority-down effort-up))
                              (org-agenda-prefix-format "%-12s %-6e %-30c"))))))

#+end_src

**** Inbox

#+begin_src emacs-lisp

  (add-to-list 'org-agenda-custom-commands
               '("i" "Inbox"
                 ((todo "TODO"
                        ((org-agenda-files '("~/notes/knowledge/inbox.org"))
                         (org-agenda-prefix-format "%-12s %-6e %-50c")))
                  (tags-todo "untagged"))))

#+end_src

**** Tech Debt

#+begin_src emacs-lisp

  (add-to-list 'org-agenda-custom-commands
               '("t" "Tech Debt"
                 ((tags-todo "techdebt"))))

#+end_src

**** Wishlist

#+begin_src emacs-lisp

  (add-to-list 'org-agenda-custom-commands
               '("w" "Wishlist"
                 ((tags-todo "wishlist"))))

#+end_src

*** Note taking

**** Journal

I am using org-journal for journalling rather than org-roam, since I find it a bit more lightweight and customisable. A bit more pure-Emacs.

***** org-journal

My org-journal is customised so that if I call my wrapper function =rsws/org-journal-new-entry=, there is different behaviour for different kinds of entries. For example, for a task, a link to the task at point is copied into the title of the new journal entry and it clocks in to the task.

#+begin_src emacs-lisp

  (defun org-agenda-buffer-p ()
    "Check if the current buffer is the org-agenda buffer."
    (and (boundp 'org-agenda-buffer-name)
         (equal (buffer-name) org-agenda-buffer-name)))

  (defun rsws/org-journal-new-entry (entry-type)
    "Create a new entry in the journal of the given type"
    ;; Do some initial actions before adding the entry.
    (cond
     ((eq entry-type 'rsws/org-journal-entry-type--task)
      ;; If entry type is a task, check that point is under a TODO heading first or we're in the agenda buffer
      (if (and (not (org-entry-get nil "TODO")) (not (org-agenda-buffer-p)))
          (user-error "Point is not under a TODO heading")
        ;; Clock in to the task under point and store a link to it.
        (progn
          (if (org-agenda-buffer-p) (org-agenda-clock-in) (org-clock-in))
          (org-store-link nil t))))
     ((eq entry-type 'rsws/org-journal-entry-type--break)
      ;; If entry type is a break, clock out.
      (org-clock-out)))

    ;; Add the entry itself.
    (org-journal-new-entry nil)

    ;; Append some text to the entry title, depending on the type.
    (cond
     ((eq entry-type 'rsws/org-journal-entry-type--note)
      ;; Basic note, just add an emoji
      (insert "✏️ "))
     ((eq entry-type 'rsws/org-journal-entry-type--task)
      ;; For a task, add a link to the task itself
      (progn
        (insert "🛠️ ")
        (org-insert-last-stored-link nil)))
     ((eq entry-type 'rsws/org-journal-entry-type--chore)
      ;; For a chore, track the time here
      (progn
        (insert "🧹 ")
        (org-clock-in)))
     ((eq entry-type 'rsws/org-journal-entry-type--meeting)
      ;; For a meeting, add an emoji and clock in to this journal entry
      (progn
        (insert "👥 ")
        (org-clock-in)))
     ((eq entry-type 'rsws/org-journal-entry-type--break)
      ;; For a break, add emoji and word "break"
      (insert "☕ Break"))))

  (use-package org-journal
    :defer t
    :custom
    (org-journal-dir "~/notes/journal/")
    (org-journal-enable-agenda-integration t))

#+end_src

**** Using org roam for agenda

[[https://www.youtube.com/watch?v=CUkuyW6hr18&list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD&index=4][5 Org Roam Hacks for Better Productivity in Emacs - YouTube]]

#+begin_src emacs-lisp :lexical t

  (defun rsws/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun rsws/org-roam-list-notes-by-tag (tag-name)
    (require 'org-roam-node)
    (delq nil
          (delete-dups
           (mapcar #'org-roam-node-file
                   (seq-filter
                    (rsws/org-roam-filter-by-tag tag-name)
                    (org-roam-node-list))))))

  (defun rsws/org-roam-refresh-agenda-list ()
     (interactive)
     (setq org-agenda-files (rsws/org-roam-list-notes-by-tag "project")))

  (defun rsws/org-roam-project-finalize-hook ()
    "Add the captured project file to org-agenda-files if not aborted."
    (remove-hook 'org-capture-after-finalize-hook #'rsws/org-roam-project-finalize-hook)
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  ;; Automatically create a project if it doesn't exist
  (defun rsws/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'rsws/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (lambda (node)
      (member "project" (org-roam-node-tags node)))
     nil
     :templates
     '(("p" "project" plain "\n\n* Summary\n\n%^{Descriptive title}\n[[%^{Jira link}][Jira Link]]%?\n\n* Tasks\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: project")
        :unnarrowed t))))

  (defun rsws/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* TODO %? :untagged:"
                                     :if-new (file+head "inbox.org" "#+title: Inbox\n")))))

  (defun rsws/org-roam-capture-task ()
    (interactive)
    (add-hook 'org-capture-after-finalize-hook #'rsws/org-roam-project-finalize-hook)
    (org-roam-capture-
     :node (org-roam-node-read
            nil
            (lambda (node)
              (member "project" (org-roam-node-tags node))))
     :templates '(("p" "project" plain "\n** TODO %? :%^g:"
                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: project"
                                          ("Tasks"))))))

  (defun rsws/org-roam-capture-alert ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("z" "alert" plain "* TODO [#A] %^{Summary} :alert:\n\nTime Occurred: %^{Time occurred}t\nTime Recorded: %T\n[[%^{Operate page link}][Operate Page]]\nName of system/workflow: %^{Name of system/workflow}\nEnvironment: %^{Environment|Internal|Development|Staging|Production}\n** Log snippet\n\n#+begin_src\n\n%?\n\n#+end_src\n\n** Actions\n\n*** TODO [#C] Create Playbook Page For %\\1\n\n** Fix\n\n- No fix yet.\n\n** Cases\n\n- [[%\\3][%\\2]]"
                                     :if-new (file+head "alerts.org" "#+title: Alerts\n")))))


#+end_src

**** Configure org-roam

#+begin_src emacs-lisp

  (use-package org-roam
    :custom
    (org-roam-directory "~/notes/knowledge")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)))
    (org-roam-dailies-directory "journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n") :clock-in :clock-resume :empty-lines 1)
       ("m" "meeting" entry "* %<%I:%M %p>: Meeting: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n") :clock-in :clock-resume :empty-lines 1)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n p" . rsws/org-roam-find-project)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . rsws/org-roam-node-insert-immediate)
           ("C-c n b" . rsws/org-roam-capture-inbox)
           ("C-c n t" . rsws/org-roam-capture-task)
           ("C-c n a" . rsws/org-roam-capture-alert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-node)
    (require 'org-roam-dailies)
    (org-roam-setup)
    (setq org-agenda-files (rsws/org-roam-list-notes-by-tag "project")))

#+end_src

#+RESULTS:
: org-roam-dailies-capture-tomorrow

**** Inserting new nodes without a new buffer

Custom command for adding a new org-roam note without opening a new buffer

#+begin_src emacs-lisp

  (defun rsws/org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                         '(:immediate-finish t)))))
          (apply #'org-roam-node-insert args)))

#+end_src

#+end_src

Adding images to notes

#+begin_src emacs-lisp

  (use-package org-download)

#+end_src

Adding links quickly
[[https://blog.jethro.dev/posts/zettelkasten_with_org/][Org-mode Workflow Part 3: Zettelkasten with Org-mode · Jethro Kuan]]

#+begin_src emacs-lisp

  (use-package org-cliplink)

#+end_src

*** Aesthetics

Customize bullets to prettier characters

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom(org-bullets-bullet-list '("⦾" "•" "⮞" "⮚" "⮞" "⮚" "⮞")))

#+end_src

Make priorities look nicer

#+begin_src emacs-lisp

  (use-package org-fancy-priorities
    :hook
    (org-mode . org-fancy-priorities-mode)
    :custom
    (org-fancy-priorities-list '("🔥" "📌" "📎" "☕" "😴")))

#+end_src

Font style and sizes for headings

#+begin_src emacs-lisp

  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font rsws/heading-font :weight 'regular :height (cdr face))))

#+end_src

Fixed width sections of org files. Stuff like the drawer and code blocks should be rendered in fixed-width font.

#+begin_src emacs-lisp

  (with-eval-after-load 'org-faces
    (progn
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-drawer nil :inherit '(fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)))

#+end_src

*** Org Babel code blocks

Switch on language support for shell, elisp, and python

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (http . t)
     (sql . t)))

  ;; Don't prompt every time we want to execute some code
  (setq org-confirm-babel-evaluate nil)
  (setq org-babel-python-command "/usr/local/bin/python3.9")

  ;; Support < prefixed snippets for commonly used source blocks
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("hp" . "src http :pretty"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
  (add-to-list 'org-structure-template-alist '("lu" . "src lua"))

#+end_src

**** ob-http                                                        :prereq:

Requires curl to run.

#+begin_src shell

  brew install curl

#+end_src

Install ob-http to support sending http requests in org-babel

#+begin_src emacs-lisp

  (use-package ob-http)

#+end_src

*** Auto-tangle Configuration Files

Automatically regenerate config files from this org-mode file whenever it is saved. 

#+begin_src emacs-lisp

  (defun rsws/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name rsws/config-file-location))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'rsws/org-babel-tangle-config))) 

#+end_src

*** Presentations

#+begin_src emacs-lisp

  (use-package org-present
    :config
    (add-hook 'org-present-after-navigate-functions 'rsws/org-present-prepare-slide)
    :hook ((org-present-mode . rsws/org-present-start)
           (org-present-mode-quit . rsws/org-present-end)))

#+end_src

Center the text on screen when presenting

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :custom
    (visual-fill-column-width 150)
    (visual-fill-column-center-text t))

#+end_src

Change faces on start and end of presentation.

#+begin_src emacs-lisp

  (defun rsws/org-present-start ()
    (delete-other-windows)
    (visual-fill-column-mode 1)
    (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
                                       (header-line (:height 8.0) variable-pitch)
                                       (org-document-title (:height 2.0) org-document-title)
                                       (org-code (:height 1.75) org-code)
                                       (org-verbatim (:height 1.75) org-verbatim)
                                       (org-block (:height 1.55) org-block)
                                       (org-block-begin-line (:height 1.0) org-block)))
    (setq header-line-format " ")
    (org-display-inline-images))

  (defun rsws/org-present-end ()
    (visual-fill-column-mode 0)
    (setq header-line-format nil)
    (org-remove-inline-images)
    (setq-local face-remapping-alist '((default variable-pitch default))))

#+end_src

Fold headings when opening a new slide.

#+begin_src emacs-lisp

  (defun rsws/org-present-prepare-slide (buffer-name heading)
    (org-overview)
    (org-show-entry)
    (org-show-children))

#+end_src

** Web Browsing

*** eww browser

#+begin_src emacs-lisp

  (use-package eww)

#+end_src

** Chat

*** Matrix

#+begin_src emacs-lisp

  (use-package ement)

#+end_src

** Tramp (SSH)

*** Fixes and optimizations for tramp

Verbose mode for debugging

#+begin_src emacs-lisp

  (setq tramp-verbose 6)

#+end_src

Faster than default scp supposedly.

#+begin_src emacs-lisp

  (setq tramp-default-method "ssh")

#+end_src

Projectile is very chatty across the network trying to resolve the modeline

#+begin_src emacs-lisp

  (setq projectile-mode-line "Projectile")

#+end_src

Some other desperate fixes

#+begin_src emacs-lisp

  (setq remote-file-name-inhibit-cache nil)
  (put 'temporary-file-directory 'standard-value
       (list temporary-file-directory))

#+end_src

** Macros

*** Hydra

Install hydra

#+begin_src emacs-lisp

  (use-package hydra)

#+end_src

*** Text scaling

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "zoom"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finish" :exit t))

#+end_src

** Project Management

*** Source control

Install magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*** Perspectives

#+begin_src emacs-lisp

  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*))
    :init
    (persp-mode)
    :custom
    (persp-mode-prefix-key (kbd "C-x x")))

#+end_src

** Custom Modes

*** Screen sharing

#+begin_src emacs-lisp

  (defvar rsws/fixed-font-size-screen-share 20
    "Font size to use when screen sharing")

  (defvar rsws/variable-font-size-screen-share 22
    "Font size to use when screen sharing")

  (define-minor-mode rsws/screen-share-mode
    "Toggle zoomed in or out buffer text globally"
    :lighter " screen-share"
    :global t
    (let ((default-fixed-font-height (* rsws/fixed-font-size 10))
          (screen-share-fixed-font-height (* rsws/fixed-font-size-screen-share 10))
          (default-variable-font-height (* rsws/variable-font-size 10))
          (screen-share-variable-font-height (* rsws/variable-font-size-screen-share 10)))
      (if rsws/screen-share-mode
          (progn (set-face-attribute 'default nil
                                     :height screen-share-fixed-font-height)
                 (set-face-attribute 'fixed-pitch nil
                                     :height screen-share-fixed-font-height)
                 (set-face-attribute 'variable-pitch nil
                                     :height screen-share-variable-font-height))
        (progn (set-face-attribute 'default nil
                                   :height default-fixed-font-height)
               (set-face-attribute 'fixed-pitch nil
                                   :height default-fixed-font-height)
               (set-face-attribute 'variable-pitch nil
                                   :height default-variable-font-height)))))

#+end_src

** Key Bindings

*** General

Manage all global key bindings here.

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-define-key
     ;; Custom keybindings

     ;; Make all the text bigger everywhere when sharing screen
     "C-c s" 'rsws/screen-share-mode :which-key "toggle screen share mode"
     ;; Shortcut to eshell
     "C-c e" 'eshell
     ;; Shortcut to new vterm buffer
     "C-c v" 'multi-vterm
     ;; Re-apply init.el configuration
     "C-c r" (lambda () (interactive) (load-file rsws/init-file-location))
     ;; Shortcut to edit emacs.org
     "C-c c" (lambda () (interactive) (find-file rsws/config-file-location))
     ;; Process an inbox entry in org
     "C-c p" 'rsws/org-agenda-process-inbox-item :which-key "process inbox item"
     ;; Clipboard link into org
     "C-c l" 'org-cliplink
     ;; Less keys to switch windows
     "M-o" 'other-window

     ;; Remappings
     ;; M-delete should kill-word
     "M-<delete>" 'kill-word
     ;; Use perspective-based buffer switching
     "C-x C-b" 'persp-ibuffer
     )

    ;; Journal key bindings
    (general-define-key
     :prefix "C-c j"
     "j" (lambda () (interactive) (rsws/org-journal-new-entry 'rsws/org-journal-entry-type--note) :which-key "create note entry")
     "t" (lambda () (interactive) (rsws/org-journal-new-entry 'rsws/org-journal-entry-type--task) :which-key "create task entry")
     "m" (lambda () (interactive) (rsws/org-journal-new-entry 'rsws/org-journal-entry-type--meeting) :which-key "create meeting entry")
     "b" (lambda () (interactive) (rsws/org-journal-new-entry 'rsws/org-journal-entry-type--break) :which-key "create break entry")
     "c" (lambda () (interactive) (rsws/org-journal-new-entry 'rsws/org-journal-entry-type--chore) :which-key "create chore entry")))

#+end_src

** Fun

*** Mastodon

#+begin_src emacs-lisp

  (use-package mastodon
    :custom
    (mastodon-instance-url "https://hachyderm.io")
    (mastodon-active-user "robsws"))

#+end_src

** AI

Use chatgpt in Emacs!

#+begin_src emacs-lisp

  (use-package chatgpt-shell
    :vc (:fetcher github :repo xenodium/chatgpt-shell)
    :config
    (load-file "~/.emacs.d/secrets.el"))

#+end_src

** Miscellaneous

*** Formatted emacs documentation

Install helpful

#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ([remap describe-function] . describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

*** Yes-or-No Prompt

Make the yes-or-no prompts prompt for 'y' or 'n' instead.

#+begin_src emacs-lisp

  (defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

*** Automatically revert buffers (e.g. refresh from file)

#+begin_src emacs-lisp

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)

#+end_src

*** Recent files

#+begin_src emacs-lisp

  (recentf-mode 1)

#+end_src

*** Save minibuffer history

#+begin_src emacs-lisp

  (setq history-length 25)
  (savehist-mode 1)

#+end_src

*** Save place in a file

#+begin_src emacs-lisp

  (save-place-mode 1)

#+end_src

*** Redirect custom variables to a different file

#+begin_src emacs-lisp

  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)

#+end_src

*** Smooth scrolling

#+begin_src emacs-lisp

  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1))

#+end_src

*** Make word definition include dash and underscore

This allows faster navigation in code using =M-b= and =M-f=.

#+begin_src emacs-lisp

  (modify-syntax-entry ?_ "w")
  (modify-syntax-entry ?- "w")

#+end_src

* Hammerspoon - Mac window manager and general customizer

** Auto-reload configuration

ReloadConfiguration spoon automatically reloads the config when there's a change, so never need to leave this file!

#+begin_src lua

  hs.loadSpoon("ReloadConfiguration")
  spoon.ReloadConfiguration:start()

#+end_src

** Use all modifier keys together as modifier for Hammerspoon

#+begin_src lua

  local modifier = {"shift", "alt", "ctrl", "cmd"}

#+end_src
  
** Define rects on screen

#+begin_src lua

  local screen = hs.screen.mainScreen()
  local screen_rect = screen:frame()
  local window_margin = 20

  local whole_rect = hs.geometry.rect(
      window_margin,
      window_margin * 2,
      screen_rect.w - window_margin * 2,
      screen_rect.h - (window_margin * 2) + 10
  )

  local left_two_thirds_rect = hs.geometry.rect(
      window_margin,
      window_margin * 2,
      (screen_rect.w/3 * 2) - window_margin,
      screen_rect.h - (window_margin * 2) + 10
  )

  local right_two_thirds_rect = hs.geometry.rect(
      (screen_rect.w/3) + window_margin,
      window_margin * 2,
      (screen_rect.w/3 * 2) - window_margin * 2,
      screen_rect.h - (window_margin * 2) + 10
  )

  local left_third_rect = hs.geometry.rect(
      window_margin,
      window_margin * 2,
      (screen_rect.w/3) - window_margin,
      screen_rect.h - (window_margin * 2) + 10
  )

  local middle_third_rect = hs.geometry.rect(
      (screen_rect.w/3) + window_margin,
      window_margin * 2,
      (screen_rect.w/3) - window_margin,
      screen_rect.h - (window_margin * 2) + 10
  )

  local right_third_rect = hs.geometry.rect(
      (screen_rect.w/3 * 2) + window_margin,
      window_margin * 2,
      (screen_rect.w/3) - (2*window_margin),
      screen_rect.h - (window_margin * 2) + 10
  )

  local left_half_rect = hs.geometry.rect(
      window_margin,
      0,
      (screen_rect.w/2) - (window_margin),
      screen_rect.h - (window_margin) + 10
  )

  local right_half_rect = hs.geometry.rect(
      (screen_rect.w/2) + window_margin,
      0,
      (screen_rect.w/2) - (2*window_margin),
      screen_rect.h - (window_margin) + 10
  )

#+end_src

** Moving windows

#+begin_src lua

  function set_focused_window_frame(rect)
      local win = hs.window.focusedWindow()
      local screen = win:screen()
      local max = screen:frame()
      win:setFrame(rect)
  end

  function minimise_focused_window()
      local win = hs.window.focusedWindow()
      win:minimize()
  end

  hs.hotkey.bind(modifier, "B", function() set_focused_window_frame(left_half_rect) end)
  hs.hotkey.bind(modifier, "F", function() set_focused_window_frame(right_half_rect) end)
  hs.hotkey.bind(modifier, "W", function() set_focused_window_frame(whole_rect) end)
  hs.hotkey.bind(modifier, "D", minimise_focused_window)

#+end_src
