#+title Rob's Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el 

* Global Constants

** Configuration file location

#+begin_src emacs-lisp

  (defvar rsws/config-file-location
    "~/.emacs.d/emacs.org"
    "The location of this configuration file in the filesystem.")

#+end_src

** Font size for fixed-width fonts

#+begin_src emacs-lisp

  (defvar rsws/fixed-font-size 16
    "Default fixed-width font size to use globally")
   
  (defvar rsws/fixed-font-size-screen-share 20
    "Font size to use when screen sharing")

#+end_src

** Font size for variable-width fonts

#+begin_src emacs-lisp

  (defvar rsws/variable-font-size 16
    "Default variable-width font size to use globally")
  
  (defvar rsws/variable-font-size-screen-share 22
    "Font size to use when screen sharing")

#+end_src

* MacOS

Set up the Mac keyboard keys to the different types of modifier keys

** Super Key

Assign s key to Option

#+begin_src emacs-lisp

  (setq mac-option-key-is-meta nil)
  (setq mac-option-modifier 'super)
  
#+end_src

** Meta Key

Assign M key to Cmd

#+begin_src emacs-lisp

  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  
#+end_src

* Package Management

** Package repositories

Tell Emacs about the package repositories online that we want to download packages from.

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)
  (package-refresh-contents)
  
#+end_src

** Use-package

Make package installation easier with the use-package package manager tool.

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; Always ensure all packages are installed by default.
  (setq use-package-always-ensure 't)

#+end_src

* Aesthetics

** Theme

Install doom emacs colour theme and visual improvements.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tomorrow-night t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  
#+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
                      :font "Iosevka"
                      :height (* rsws/fixed-font-size 10))

  (set-face-attribute 'fixed-pitch nil
                      :font "Iosevka"
                      :height (* rsws/fixed-font-size 10))

  (set-face-attribute 'variable-pitch nil
                      :font "Proxima Nova"
                      :height (* rsws/variable-font-size 10))

#+end_src

** Remove default UI

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** Line numbers

Put line numbers on by default for all buffers...

#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  
#+end_src

...except for org and shell buffers.

#+begin_src emacs-lisp

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Column numbers

#+begin_src emacs-lisp

  (setq column-number-mode t)

#+end_src

** Colour-matched parentheses

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** Icons

Install icons for use in various UI elements.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Mode line

Install doom-modeline.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

* Completions

** Key binding completions

Install which-key, which tells you what key combinations can come next in a chord.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Code completions

Install company mode and enable globally.

#+begin_src emacs-lisp

  (add-hook 'after-init-hook 'global-company-mode)
  
  (use-package company
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
                ("C-n". company-select-next)
                ("C-p". company-select-previous)
                ("M-<". company-select-first)
                ("M->". company-select-last)))

#+end_src

** Snippets

Install yasnippet.

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))

#+end_src

** Search

Install ivy for nice list-based search completions

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

Install counsel to extend ivy capabilities to common emacs functions

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

* Static Code Analysis

** Syntax validation

Install flycheck.

#+begin_src emacs-lisp

  (use-package flycheck)

#+end_src

** Code parsing

Install tree-sitter

#+begin_src emacs-lisp

  (use-package tree-sitter-langs)
  
  (use-package tree-sitter
    :config
    (require 'tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

#+end_src

** Python

Install elpy

#+begin_src emacs-lisp

  (use-package elpy
    :init (elpy-enable))

#+end_src

** Rust

Function to allow cargo run to be run with command line arguments

#+begin_src emacs-lisp

  (defun rustic-cargo-run-with-args ()
    "Run 'cargo run' with arguments"
    (interactive)
    (rustic-cargo-run t))

#+end_src

Function to allow running cargo run without prompt

#+begin_src emacs-lisp

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

#+end_src

Install rustic

#+begin_src emacs-lisp

  (use-package rustic
    :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status)
              ("C-c C-c C-r" . rustic-cargo-run-with-args))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))
  
#+end_src

* Org Mode

** Basic configuration

Define a function that will be run every time org-mode is initiated, that does some custom setup.

#+begin_src emacs-lisp

  (defun rsws/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

Install the org package and configure.

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . rsws/org-mode-setup)

    :config
    ;; Set default verb key prefix (for sending http requests from org)
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
    ;; Open agenda from anywhere
    (define-key global-map "\C-ca" 'org-agenda)
    ;; Install org habits
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)

    :custom
    ;; Prettier org mode bits
    (org-ellipsis " ▼")
    (org-cycle-separator-lines -1)
    (org-habit-graph-column 60)
    ;; Where agenda should pull tasks from
    (org-agenda-files '("~/notes/tasks.org"))
    ;; Save timestamp when marking as DONE
    (org-log-done 'time)
    ;; Put logbook in the org drawer section
    (org-log-into-drawer t)
    ;; Define workflow of tasks
    (org-todo-keywords
     '((sequence "TODO(t)" "DOING(n)" "WAIT(w@/!)" "|" "DONE(d!)" "CANC(c@)")))
    ;; Allow 4 levels of priority
    (org-priority-highest ?A)
    (org-priority-lowest ?D))

  (global-set-key (kbd "C-c j") 'org-capture)

#+end_src

** Aesthetics

Customize bullets to prettier characters

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom(org-bullets-bullet-list '("🌀" "➔" "➼" "⮚" "⮞" "⮚" "⮞")))

#+end_src

Make priorities look nicer

#+begin_src emacs-lisp

  (use-package org-fancy-priorities
    :hook
    (org-mode . org-fancy-priorities-mode)
    :custom
    (org-fancy-priorities-list '("❗" "⬆" "⬇" "☕")))

#+end_src

Font style and sizes for headings

#+begin_src emacs-lisp

  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Proxima Nova" :weight 'regular :height (cdr face))))

#+end_src

Fixed width sections of org files. Stuff like the drawer and code blocks should be rendered in fixed-width font.

#+begin_src emacs-lisp

  (with-eval-after-load 'org-faces
    (progn
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-drawer nil :inherit '(fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)))

#+end_src

** Switch on language support for org code blocks

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)))

  ;; Don't prompt every time we want to execute some code
  (setq org-confirm-babel-evaluate nil)

  ;; Support < prefixed snippets for commonly used source blocks
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration Files

Automatically regenerate init.el file from this org-mode file whenever it is saved. 

#+begin_src emacs-lisp

  (defun rsws/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name rsws/config-file-location))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'rsws/org-babel-tangle-config))) 

#+end_src

* Tramp (SSH)

** Fixes and optimizations for tramp

#+begin_src emacs-lisp

  (setq projectile-mode-line "Projectile")
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-handled-backends '(Git))
  (setq tramp-verbose 1)

#+end_src

* Macros

** Hydra

Install hydra

#+begin_src emacs-lisp

  (use-package hydra)

#+end_src

** Text scaling

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "zoom"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finish" :exit t))

#+end_src

* Project Management

** Project switching

Install projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/repos")
      (setq projectile-project-search-path '("~/repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Source control

Install magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Custom Modes

** Screen sharing

#+begin_src emacs-lisp

  (define-minor-mode rsws/screen-share-mode
    "Toggle zoomed in or out buffer text globally"
    :lighter " screen-share"
    :global t
    (let ((default-fixed-font-height (* rontrol-fixed-font-size 10))
          (screen-share-fixed-font-height (* rontrol-fixed-font-size-screen-share 10))
          (default-variable-font-height (* rontrol-variable-font-size 10))
          (screen-share-variable-font-height (* rontrol-variable-font-size-screen-share 10)))
      (if screen-share-mode
          (progn (set-face-attribute 'default nil
                                     :height screen-share-fixed-font-height)
                 (set-face-attribute 'fixed-pitch nil
                                     :height screen-share-fixed-font-height)
                 (set-face-attribute 'variable-pitch nil
                                     :height screen-share-variable-font-height))
        (progn (set-face-attribute 'default nil
                                   :height default-fixed-font-height)
               (set-face-attribute 'fixed-pitch nil
                                   :height default-fixed-font-height)
               (set-face-attribute 'variable-pitch nil
                                   :height default-variable-font-height)))))

#+end_src

* Custom Key Binding Prefix

** Rontrol

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer rontrol
      :prefix "C-<escape>"
      :global-prefix "C-<escape>")

    (rontrol
      ;; Make font size bigger for screen sharing
      "s" 'rsws/screen-share-mode :which-key "toggle screen share mode"
      "j" 'org-capture))

#+end_src

* Miscellaneous

** Formatted emacs documentation

Install helpful

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Yes-or-No Prompt

Make the yes-or-no prompts prompt for 'y' or 'n' instead.

#+begin_src emacs-lisp

  (defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

** Automatically revert buffers (i.e. refresh from file)

#+begin_src emacs-lisp

  (auto-revert-mode)

#+end_src
